# Try to get a short workflow name and a job name that start with Python
# version to make it easier to check the status inside GitHub UI.
#
# When using external actions check that the external repos are permitted via
# the GitHub configuration at https://github.com/twisted/twisted/settings/actions
#
name: CI

on:
  push:
    branches: [ trunk ]
    tags:
      - twisted-*
  pull_request:
    branches: [ trunk ]

  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

permissions:
  contents: read

# Only have a run a single parallel for each branch.
# Runs for trunk are queues.
# Older runs for non-trunk branches are cancelled and the jobs are executed
# only for the latest push to the branch.
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/trunk' }}


defaults:
  run:
    shell: bash

env:
  # Set to 'yes' to open a tunnel to GitHub's VMs through tmate on failures.
  # You can also trigger it via manual workflow trigger.
  # https://github.com/mxschmitt/action-tmate#manually-triggered-debug
  TMATE_DEBUG: 'no'
  # The default values in the job generated by the matrix.
  DEFAULT_PYTHON_VERSION: '3.10'

jobs:
  testing:
    # We can't use `env.*` in the job name, only in the steps.
    name: ${{ matrix.python-version }}-${{ matrix.job-name || 'default-tests' }}
    # We have Ubuntu as the base for running agains multiple Python versions.
    runs-on: "${{ matrix.runs-on || 'ubuntu-20.04' }}"
    env:
      # By default we run all tests with all deps with coverage.
      TOXENV: "${{ matrix.tox-env || 'alldeps-withcov-posix' }}"
      # As of April 2021 GHA VM have 2 CPUs - Azure Standard_DS2_v2
      # Trial distributed jobs enabled to speed up the CI jobs.
      # On Windows, we don't yet enable distributed tests as is not yet
      # supported.
      TRIAL_ARGS: "${{ matrix.trial-args || '-j 4' }}"
    strategy:
      fail-fast: false
      # The matrix is designed to not expand into any job.
      # It is used to document the test environement variations.
      # The actual job enviroment are defined in the `include` section.
      matrix:
        # The Python version on which the job is executed.
        # We need at least one value here, so we go with latest Python version
        # that we support..
        python-version: ['3.10']
        # Just use the default OS.
        runs-on: ['']
        # Human readable short description for this job.
        job-name: ['']
        # This is the main tox target.
        # It is later extended with more jobs that should run in a specific
        # OS + Python version configuration.
        tox-env: ['']
        # We just go with the default arguments.
        trial-args: ['']
        # By default, tests are executed without disabling IPv6.
        noipv6: ['']
        # By default, tests are executed without extra platform dependencies.
        platform-deps: ['']
        # By default, tests are executed directly via tox.
        tox-wrapper: ['']
        # Tests are executed with the default target which is the full test suite.
        trial-target: ['']
        # By default the coverage is not skipped.
        skip-coverage: ['']

        # Here the matrix is extended with variations of the default
        # value.
        include:

          # Newest macOS and newest Python supported versions.
          - python-version: '3.10'
            runs-on: 'macos-12'
            job-name: 'macos-12-default-tests'
            trial-args: '-e'
            trial-target: 'twisted.trial._dist.test.test_stream.StreamTests'


    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key:
          ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'setup.py',
          'setup.cfg', 'tox.ini') }}
        restore-keys: |
            ${{ runner.os }}-pip-

    # Make sure the matrix is defined in such a way that this is triggered
    # only on Linux.
    - name: Disable IPv6
      if: matrix.noipv6
      run: |
        sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
        sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1
        ip a

    - uses: twisted/python-info-action@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox coverage

    # Make sure the matrix is defined in such a way that this is triggered
    # only on Linux.
    - name: Install GTK system deps
      if: matrix.platform-deps == 'gtk_platform'
      run: |
        # *-dev dependencies are for pygobject
        # https://gitlab.gnome.org/GNOME/pygobject/-/blob/3.42.0/setup.py#L129-L134
        sudo apt-get update
        sudo apt-get install -y \
          libgirepository1.0-dev \
          libglib2.0-dev \
          libcairo2-dev \
          libffi-dev \
          gir1.2-gtk-3.0 \
          xvfb

    - name: Test
      run: |
        ${{ matrix.tox-wrapper }} tox ${{ matrix.trial-target }}

    - uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: "test.log"
        path: "_trial_temp/test.log"

    # If one of the above steps fails, fire up tmate for remote debugging.
    # This is fired for manual trigger or via the environment variable.
    - name: Tmate debug session
      if: ${{ failure() && (env.TMATE_DEBUG == 'yes' || github.event_name == 'workflow_dispatch' && inputs.debug_enabled ) }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true

    - name: Prepare coverage
      if: ${{ !cancelled() && !matrix.skip-coverage }}
      run: |
        # sub-process coverage are generated in separate files so we combine them
        # to get an unified coverage for the local run.
        # The XML is generate to be used with 3rd party tools like diff-cover.
        python -m coverage combine
        python -m coverage xml -o coverage.xml -i
        python -m coverage report --skip-covered

    - uses: codecov/codecov-action@v3
      if: ${{ !cancelled() && !matrix['skip-coverage'] }}
      with:
        files: coverage.xml
        name: ${{ matrix.python-version || env.DEFAULT_PYTHON_VERSION }}-${{matrix.job-name || 'default-tests' }}
        fail_ci_if_error: true



  static-checks:
    runs-on: ubuntu-20.04
    env:
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - uses: actions/checkout@v2
      with:
        # Need history on all branches for newsfragment to work.
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '${{ env.DEFAULT_PYTHON_VERSION }}'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox

    - name: Run the checks
      run: |
        python --version
        tox --parallel -e lint,mypy

    - name: Revert merge commit for a release branch
      if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release-')
      env:
        BRANCH_SHA: ${{ github.event.after }}
        BRANCH_NAME: ${{ github.head_ref }}
      run: |
        git checkout -b $BRANCH_NAME
        git reset --hard $BRANCH_SHA

    - name: Newsfragment
      run: |
        tox -q -e newsfragment

    # This is called only on code changes.
    # If you forgot to define the right PR title you should re-run the job.
    - name: Check PR title format
      if: github.event_name == 'pull_request'
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PR_BODY: ${{ github.event.pull_request.body }}
      run: python .github/scripts/check-pr-text.py


  # Used to validate the narrative and API docs.
  # Checks for invalid syntax or broken links.
  # This is only the validation and help highlight docs errors.
  # The actual docs are built and published via Read The Docs.
  apidocs:
    name: API docs build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox

    - name: Build apidocs
      run: |
        tox -e apidocs

  narrativedocs:
    name: Narrative docs build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox

    - name: Run the checks
      run: |
        tox -e narrativedocs


  # Used for various release automation.
  # This is also executed for each PR to exercise the release as much
  # as possible and reduce the possibility of finding bugs in the release
  # process late in the release cycle,
  # The files are published only when a tag is created.
  release-publish:
    name: Check release and publish on twisted-* tag
    runs-on: 'ubuntu-20.04'
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '${{ env.DEFAULT_PYTHON_VERSION }}'

    - name: Test
      run: |
        python -m pip install --upgrade pip tox pep517
        rm -rf dist/*
        tox -e release-prepare

    - uses: twisted/python-info-action@v1

    - name: Files to be pushed to PyPi
      run: |
        ls -R dist/

    - name: Check matched tag version and branch version - on tag
      if: startsWith(github.ref, 'refs/tags/twisted-')
      run: python admin/check_tag_version_match.py "${{ github.ref }}"

    - name: Publish to PyPI - on tag
      if: startsWith(github.ref, 'refs/tags/twisted-')
      uses: pypa/gh-action-pypi-publish@v1.5.1
      with:
        password: ${{ secrets.PYPI_UPLOAD_TOKEN }}

  # Read the Docs has no support for our "twisted-1.2.3" numbering convention
  # and can't detect which tag is the stable one.
  # A workaournd is to manually push to a "stable" branch to inform RTD
  # that this is what we want at the "/en/stable" link.
  update-stable-branch:
    permissions:
      contents: write
    name: Update stable branch for RTD - on tag
    runs-on: 'ubuntu-20.04'
    needs: [release-publish]
    if: startsWith(github.ref, 'refs/tags/twisted-')
    steps:
    - name: Update stable branch - on stable tag
      env:
        STABLE_BRANCH: 'stable'
        STABLE_REF_RE: '.*twisted-[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'
      run: |
          if [[ $GITUB_REF =~ $STABLE_REF_RE ]]; then
            echo "Pushing current tag to stable branch..."
            git config --global user.name '$GITHUB_ACTOR'
            git config --global user.email '$GITHUB_ACTOR@users.noreply.github.com'

            echo '::group::git fetch'
            git fetch origin
            echo '::endgroup::'

            git log -1
            git checkout -b $STABLE_BRANCH origin/$STABLE_BRANCH
            git reset --hard $GITHUB_SHA
            git push --force
            echo "Done"
          else
            echo "Branch not updated for not stable releases: $GITUB_REF"
          fi

  # We have this job so that the PR can be blocked on a single job.
  # In this way, each time a job is modified,
  # we don't have to go to GitHub UI and reconfigure branch protection.
  # See GitHub support answer for this hack.
  # https://gist.github.com/altendky/2e3483a1f7e1ba21cc97de75db9b7d1c
  all-successful:
    # Is very important to force running this always, as otherwise it will be
    #  skipped by default.
    if: always()
    runs-on: ubuntu-latest
    # Here should be the list of all the other jobs defined in this file.
    needs:
      - testing
      - narrativedocs
      - apidocs
      - static-checks
      - release-publish
    steps:
      - name: Require all successes
        shell: python
        env:
          RESULTS: ${{ toJSON(needs.*.result) }}
        run: |
          import json
          import os
          import sys
          results = json.loads(os.environ["RESULTS"])
          sys.exit(0 if all(result == "success" for result in results) else 1)
